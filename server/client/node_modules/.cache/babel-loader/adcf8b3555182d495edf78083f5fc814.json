{"ast":null,"code":"import _defineProperty from \"/Users/laura/Desktop/Ubicum/Part VI-React/client/client/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n//  3- REDUCERS\n// 0- create ReduxStore\nconst redux = require('redux');\n\nconst createStore = redux.createStore;\nconst applyMiddleware = redux.applyMiddleware;\n\nconst thunkMiddleware = require('redux-thunk').default;\n\nconst axios = require('axios'); // import {combineReducers} from 'redux'\n\n\nimport { FETCH_CITIES_REQUEST, FETCH_CITIES_SUCCESS, FETCH_CITIES_FAILURE } from '../actions/cityActions'; // 1- STATE\n\nconst initialState = {\n  loading: false,\n  cities: [],\n  error: ''\n};\n\nconst citiesReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case FETCH_CITIES_REQUEST:\n      return _objectSpread({}, state, {\n        loading: true\n      });\n\n    case FETCH_CITIES_SUCCESS:\n      return {\n        loading: false,\n        cities: action.payload,\n        error: ''\n      };\n\n    case FETCH_CITIES_FAILURE:\n      return {\n        loading: false,\n        cities: [],\n        error: action.payload\n      };\n  }\n}; // Action Creators\n\n\nconst fetchCitiesList = () => {\n  return function (dispatch) {\n    dispatch(fetchCitiesRequest());\n    axios.get('https://mern-ubiqum-v2.herokuapp.com/cities/all').then(response => {\n      const cities = response.data.map(city => city.id);\n      dispatch(fetchCitiesSuccess(cities));\n    }).catch(error => {\n      dispatch(fetchCitiesFailure(error.message));\n    });\n  };\n};\n\nconst store = createStore(citiesReducer, applyMiddleware(thunkMiddleware)); // now we subscribe the store\n\nstore.subscribe(() => {\n  console.log(store.getState());\n});\nstore.dispatch(fetchCitiesList());\nexport default (citiesReducer, fetchCitiesList);","map":{"version":3,"sources":["/Users/laura/Desktop/Ubicum/Part VI-React/client/client/src/store/reducers/cityReducer.js"],"names":["redux","require","createStore","applyMiddleware","thunkMiddleware","default","axios","FETCH_CITIES_REQUEST","FETCH_CITIES_SUCCESS","FETCH_CITIES_FAILURE","initialState","loading","cities","error","citiesReducer","state","action","type","payload","fetchCitiesList","dispatch","fetchCitiesRequest","get","then","response","data","map","city","id","fetchCitiesSuccess","catch","fetchCitiesFailure","message","store","subscribe","console","log","getState"],"mappings":";;;;;;AAAA;AAEA;AAEA,MAAMA,KAAK,GAAGC,OAAO,CAAC,OAAD,CAArB;;AACA,MAAMC,WAAW,GAAGF,KAAK,CAACE,WAA1B;AACA,MAAMC,eAAe,GAAGH,KAAK,CAACG,eAA9B;;AACA,MAAMC,eAAe,GAAGH,OAAO,CAAC,aAAD,CAAP,CAAuBI,OAA/C;;AACA,MAAMC,KAAK,GAAGL,OAAO,CAAC,OAAD,CAArB,C,CAIA;;;AACA,SACIM,oBADJ,EAEIC,oBAFJ,EAGIC,oBAHJ,QAIO,wBAJP,C,CAMA;;AAEA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,OAAO,EAAE,KADQ;AAEjBC,EAAAA,MAAM,EAAE,EAFS;AAGjBC,EAAAA,KAAK,EAAE;AAHU,CAArB;;AAMA,MAAMC,aAAa,GAAG,CAACC,KAAK,GAAGL,YAAT,EAAuBM,MAAvB,KAAkC;AACpD,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKV,oBAAL;AACI,+BACOQ,KADP;AAEIJ,QAAAA,OAAO,EAAE;AAFb;;AAKJ,SAAKH,oBAAL;AACI,aAAO;AACHG,QAAAA,OAAO,EAAE,KADN;AAEHC,QAAAA,MAAM,EAAEI,MAAM,CAACE,OAFZ;AAGHL,QAAAA,KAAK,EAAE;AAHJ,OAAP;;AAMJ,SAAKJ,oBAAL;AACI,aAAO;AACHE,QAAAA,OAAO,EAAE,KADN;AAEHC,QAAAA,MAAM,EAAE,EAFL;AAGHC,QAAAA,KAAK,EAAEG,MAAM,CAACE;AAHX,OAAP;AAfR;AAqBH,CAtBD,C,CAwBA;;;AAEA,MAAMC,eAAe,GAAG,MAAM;AAC1B,SAAO,UAASC,QAAT,EAAmB;AAEtBA,IAAAA,QAAQ,CAACC,kBAAkB,EAAnB,CAAR;AACAf,IAAAA,KAAK,CAACgB,GAAN,CAAU,iDAAV,EACCC,IADD,CACOC,QAAQ,IAAI;AACf,YAAMZ,MAAM,GAAGY,QAAQ,CAACC,IAAT,CAAcC,GAAd,CAAkBC,IAAI,IAAIA,IAAI,CAACC,EAA/B,CAAf;AACAR,MAAAA,QAAQ,CAACS,kBAAkB,CAACjB,MAAD,CAAnB,CAAR;AACH,KAJD,EAMCkB,KAND,CAMQjB,KAAK,IAAI;AACbO,MAAAA,QAAQ,CAACW,kBAAkB,CAAClB,KAAK,CAACmB,OAAP,CAAnB,CAAR;AACH,KARD;AASH,GAZD;AAaH,CAdD;;AAgBA,MAAMC,KAAK,GAAG/B,WAAW,CAACY,aAAD,EAAgBX,eAAe,CAACC,eAAD,CAA/B,CAAzB,C,CAEA;;AAEA6B,KAAK,CAACC,SAAN,CAAgB,MAAK;AAACC,EAAAA,OAAO,CAACC,GAAR,CAAYH,KAAK,CAACI,QAAN,EAAZ;AAA8B,CAApD;AACAJ,KAAK,CAACb,QAAN,CAAeD,eAAe,EAA9B;AAEA,gBAAgBL,aAAa,EAAEK,eAA/B","sourcesContent":["//  3- REDUCERS\n\n// 0- create ReduxStore\n\nconst redux = require('redux')\nconst createStore = redux.createStore\nconst applyMiddleware = redux.applyMiddleware\nconst thunkMiddleware = require('redux-thunk').default\nconst axios = require('axios')\n\n\n\n// import {combineReducers} from 'redux'\nimport {\n    FETCH_CITIES_REQUEST,\n    FETCH_CITIES_SUCCESS,\n    FETCH_CITIES_FAILURE\n} from '../actions/cityActions'\n\n// 1- STATE\n\nconst initialState = {\n    loading: false, \n    cities: [],\n    error: ''\n}\n\nconst citiesReducer = (state = initialState, action) => {\n    switch (action.type){\n        case FETCH_CITIES_REQUEST:\n            return {\n                ...state,\n                loading: true\n            }\n\n        case FETCH_CITIES_SUCCESS:\n            return {\n                loading: false, \n                cities: action.payload,\n                error: ''\n            }    \n\n        case FETCH_CITIES_FAILURE:\n            return {\n                loading: false, \n                cities: [],\n                error: action.payload\n            }    \n    }\n}\n\n// Action Creators\n\nconst fetchCitiesList = () => {\n    return function(dispatch) {\n        \n        dispatch(fetchCitiesRequest())\n        axios.get('https://mern-ubiqum-v2.herokuapp.com/cities/all')\n        .then (response => {\n            const cities = response.data.map(city => city.id)\n            dispatch(fetchCitiesSuccess(cities))\n        })\n\n        .catch (error => {\n            dispatch(fetchCitiesFailure(error.message))\n        })\n    }\n}\n\nconst store = createStore(citiesReducer, applyMiddleware(thunkMiddleware))\n\n// now we subscribe the store\n\nstore.subscribe(()=> {console.log(store.getState())})\nstore.dispatch(fetchCitiesList())\n\nexport default (citiesReducer, fetchCitiesList)"]},"metadata":{},"sourceType":"module"}