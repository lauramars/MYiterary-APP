{"ast":null,"code":"import _defineProperty from\"/Users/laura/Desktop/Ubicum/Part VI-React/client/server/client/node_modules/@babel/runtime/helpers/esm/defineProperty\";function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);if(enumerableOnly)symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;});keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=arguments[i]!=null?arguments[i]:{};if(i%2){ownKeys(source,true).forEach(function(key){_defineProperty(target,key,source[key]);});}else if(Object.getOwnPropertyDescriptors){Object.defineProperties(target,Object.getOwnPropertyDescriptors(source));}else{ownKeys(source).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}}return target;}//  3- REDUCERS\n// 0- create ReduxStore\n// const redux = require('redux')\n// const createStore = redux.createStore\n// const applyMiddleware = redux.applyMiddleware\n// const thunkMiddleware = require('redux-thunk').default\n// import {combineReducers} from 'redux'\n// import {\n//     FETCH_CITIES_REQUEST,\n//     FETCH_CITIES_SUCCESS,\n//     FETCH_CITIES_FAILURE\n// } from \nvar FETCH_CITIES_REQUEST='FETCH_CITIES_REQUEST';var FETCH_CITIES_SUCCESS='FETCH_CITIES_SUCCESS';var FETCH_CITIES_FAILURE='FETCH_CITIES_FAILURE';// 1- STATE\nvar initialState={loading:true,cities:[],error:''};function citiesReducer(){var state=arguments.length>0&&arguments[0]!==undefined?arguments[0]:initialState;var action=arguments.length>1?arguments[1]:undefined;switch(action.type){case FETCH_CITIES_REQUEST:return _objectSpread({},state,{loading:true});case FETCH_CITIES_SUCCESS:return{loading:false,cities:action.payload,error:''};case FETCH_CITIES_FAILURE:return{loading:false,cities:[],error:action.payload};default:return state;}}export default citiesReducer;// Action Creators\n// const store = createStore(citiesReducer, applyMiddleware(thunkMiddleware))\n// // now we subscribe the store\n// store.subscribe(()=> {console.log(store.getState())})\n// store.dispatch(fetchCitiesList())\n// export default (citiesReducer, fetchCitiesList)","map":{"version":3,"sources":["/Users/laura/Desktop/Ubicum/Part VI-React/client/server/client/src/store/reducers/cityReducer.js"],"names":["FETCH_CITIES_REQUEST","FETCH_CITIES_SUCCESS","FETCH_CITIES_FAILURE","initialState","loading","cities","error","citiesReducer","state","action","type","payload"],"mappings":"+5BAAA;AAEA;AAEA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AAEC,GAAMA,CAAAA,oBAAoB,CAAG,sBAA7B,CACA,GAAMC,CAAAA,oBAAoB,CAAG,sBAA7B,CACA,GAAMC,CAAAA,oBAAoB,CAAG,sBAA7B,CAED;AAEA,GAAMC,CAAAA,YAAY,CAAG,CACjBC,OAAO,CAAE,IADQ,CAEjBC,MAAM,CAAE,EAFS,CAGjBC,KAAK,CAAE,EAHU,CAArB,CAMA,QAASC,CAAAA,aAAT,EAAsD,IAA9BC,CAAAA,KAA8B,2DAAtBL,YAAsB,IAARM,CAAAA,MAAQ,2CAClD,OAAQA,MAAM,CAACC,IAAf,EACI,IAAKV,CAAAA,oBAAL,CACI,wBACOQ,KADP,EAEIJ,OAAO,CAAE,IAFb,GAKJ,IAAKH,CAAAA,oBAAL,CACI,MAAO,CACHG,OAAO,CAAE,KADN,CAEHC,MAAM,CAAEI,MAAM,CAACE,OAFZ,CAGHL,KAAK,CAAE,EAHJ,CAAP,CAMJ,IAAKJ,CAAAA,oBAAL,CACI,MAAO,CACHE,OAAO,CAAE,KADN,CAEHC,MAAM,CAAE,EAFL,CAGHC,KAAK,CAAEG,MAAM,CAACE,OAHX,CAAP,CAKJ,QACI,MAAOH,CAAAA,KAAP,CArBR,CAuBH,CAGD,cAAeD,CAAAA,aAAf,CACA;AAIA;AAEA;AAEA;AACA;AAEA","sourcesContent":["//  3- REDUCERS\n\n// 0- create ReduxStore\n\n// const redux = require('redux')\n// const createStore = redux.createStore\n// const applyMiddleware = redux.applyMiddleware\n// const thunkMiddleware = require('redux-thunk').default\n\n\n\n\n// import {combineReducers} from 'redux'\n// import {\n//     FETCH_CITIES_REQUEST,\n//     FETCH_CITIES_SUCCESS,\n//     FETCH_CITIES_FAILURE\n// } from \n\n const FETCH_CITIES_REQUEST = 'FETCH_CITIES_REQUEST'\n const FETCH_CITIES_SUCCESS = 'FETCH_CITIES_SUCCESS'\n const FETCH_CITIES_FAILURE = 'FETCH_CITIES_FAILURE' \n\n// 1- STATE\n\nconst initialState = {\n    loading: true, \n    cities: [],\n    error: ''\n}\n\nfunction citiesReducer (state = initialState, action) {\n    switch (action.type){\n        case FETCH_CITIES_REQUEST:\n            return {\n                ...state,\n                loading: true\n            }\n\n        case FETCH_CITIES_SUCCESS:\n            return {\n                loading: false, \n                cities: action.payload,\n                error: ''\n            }    \n\n        case FETCH_CITIES_FAILURE:\n            return {\n                loading: false, \n                cities: [],\n                error: action.payload\n            }  \n        default: \n            return state\n    }\n}\n\n\nexport default citiesReducer;\n// Action Creators\n\n\n\n// const store = createStore(citiesReducer, applyMiddleware(thunkMiddleware))\n\n// // now we subscribe the store\n\n// store.subscribe(()=> {console.log(store.getState())})\n// store.dispatch(fetchCitiesList())\n\n// export default (citiesReducer, fetchCitiesList)"]},"metadata":{},"sourceType":"module"}