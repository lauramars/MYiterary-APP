{"ast":null,"code":"var _jsxFileName = \"/Users/laura/Desktop/Ubicum/Part VI-React/client/client/src/components/Cities.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport homeIcon from '../images/homeIcon.png';\nimport { fetchCitiesList } from '../store/actions/cityActions'; // import Itineraries from './Itineraries';\n\nclass Cities extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleChange = e => {\n      this.setState({\n        cityFilter: e.target.value\n      });\n    };\n\n    this.filterCities = () => {\n      const cities = this.props.cities;\n      const cityFilter = this.state.cityFilter;\n      return cities.filter(city => {\n        return city.name.toLowerCase().indexOf(cityFilter.toLowerCase()) !== -1;\n      });\n    };\n\n    this.state = {\n      cities: [],\n      cityFilter: \"\",\n      fetchCitiesList: []\n    };\n  }\n\n  componentDidMount() {\n    this.props.fetchCitiesList();\n  }\n\n  render() {\n    const loading = this.props.loading;\n    if (!loading) return React.createElement(\"div\", {\n      className: \"flex-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }, React.createElement(\"header\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"filter\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      htmlFor: \"filter\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }, \"Filter by City: \"), React.createElement(\"input\", {\n      type: \"text\",\n      id: \"filter\",\n      value: this.state.cityFilter,\n      onChange: this.handleChange.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"city-list\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }, React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, this.filterCities().map(city => {\n      return React.createElement(\"li\", {\n        className: \"city\",\n        key: city._id,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71\n        },\n        __self: this\n      }, React.createElement(Link, {\n        to: \"/itinerarie\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72\n        },\n        __self: this\n      }, city.name, \" - \", city.country));\n    }))), React.createElement(\"div\", {\n      className: \"itemFooter\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, React.createElement(Link, {\n      to: \"/\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      src: homeIcon,\n      alt: \"homeLogo\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }))));else return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }, \"Loading ... \");\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    // initialState: state.initialState\n    cities: state.cities.cities,\n    loading: state.cities.loading\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    fetchCitiesList: () => dispatch(fetchCitiesList())\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Cities);","map":{"version":3,"sources":["/Users/laura/Desktop/Ubicum/Part VI-React/client/client/src/components/Cities.js"],"names":["React","Component","connect","Link","homeIcon","fetchCitiesList","Cities","constructor","props","handleChange","e","setState","cityFilter","target","value","filterCities","cities","state","filter","city","name","toLowerCase","indexOf","componentDidMount","render","loading","bind","map","_id","country","mapStateToProps","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport {connect} from 'react-redux'\nimport { Link } from 'react-router-dom';\nimport homeIcon from '../images/homeIcon.png';\nimport {fetchCitiesList} from '../store/actions/cityActions';\n// import Itineraries from './Itineraries';\n\n\nclass Cities extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = { \n            cities: [],\n            cityFilter: \"\",\n            fetchCitiesList: []\n        }\n    }\n\n    componentDidMount() {\n        this.props.fetchCitiesList()\n    }\n\n    handleChange = (e) => {\n        this.setState({\n            cityFilter: e.target.value\n        })\n    }\n\n    // fetchCities = async () => {\n    //     var url = \"https://mern-ubiqum-v2.herokuapp.com/cities/all\"\n    //     return await fetch(url, {\n    //         method: \"GET\",\n    //     })\n    //         .then(response => response.json())\n    //         .then(data => data)\n    //         .catch(error => console.log(error))\n    // }\n\n    filterCities = () => {\n        const { cities } = this.props;\n        const { cityFilter } = this.state;\n        return cities.filter((city) => {\n            return city.name.toLowerCase().indexOf(cityFilter.toLowerCase()) !== -1\n        },\n        );\n    }\n\n    render() {\n        const { loading } = this.props;\n         \n        if (!loading)\n        return (\n            \n            <div className=\"flex-container\">\n                <header >\n                 <div></div>\n                </header>\n\n                <div className=\"filter\">\n                    <label htmlFor=\"filter\">Filter by City: </label>\n                    <input type=\"text\" id=\"filter\"\n                        value={this.state.cityFilter}\n                        onChange={this.handleChange.bind(this)} />\n                </div>\n                \n                <div className=\"city-list\">\n                   <ul>\n                        {this.filterCities().map((city) => {\n                            return (\n                                <li className=\"city\" key={city._id}>\n                                    <Link to=\"/itinerarie\">\n                                    {city.name} - {city.country}\n                                    {/* <Itineraries/> */}\n                                  </Link>\n                                  \n                                </li>   \n                            )\n                        }\n                        )}\n                    </ul>\n                </div>\n                \n\n                <div className=\"itemFooter\">\n                    <Link to=\"/\">\n                        <img src={homeIcon} alt=\"homeLogo\" />\n                    </Link>\n                </div>\n\n            </div>\n        )\n        else \n        return (\n            <div>Loading ... </div>\n        )\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        // initialState: state.initialState\n        cities: state.cities.cities,\n        loading: state.cities.loading\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        fetchCitiesList: () => dispatch(fetchCitiesList())\n    }\n}\n\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n    ) (Cities)"]},"metadata":{},"sourceType":"module"}