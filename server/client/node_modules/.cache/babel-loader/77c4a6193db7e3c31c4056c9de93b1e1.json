{"ast":null,"code":"var _jsxFileName = \"/Users/laura/Desktop/Ubicum/Part VI-React/client/client/src/components/Itineraries.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { fetchItinerariesList } from '../store/actions/itinerariesActions'; // import { Link } from 'react-router-dom';\n\nclass Itineraries extends Component {\n  constructor(props) {\n    super(props);\n\n    this.itinerariesByCity = () => {\n      const itineraries = this.props.itineraries;\n      const city = this.props.itineraries.city;\n      const cityItineraries = this.state.cityItineraries;\n      return itineraries.findOne(city => {\n        return cityItineraries;\n      });\n    };\n\n    this.state = {\n      itineraries: [],\n      city: \"\",\n      itinerariesByCity: [],\n      fetchItineraryList: []\n    };\n  }\n\n  componentDidMount() {\n    this.props.fetchItinerariesList();\n    let cityItineraries = this.props.itineraries.city;\n    this.setState({\n      cityItineraries: cityItineraries\n    });\n  }\n\n  // let cityRequested = req.params.name;\n  // cityModel.findOne({ name: cityRequested })\n  // \t.then(city => {\n  // \t\tres.send(city)\n  // \t})\n  // \t.catch(err => console.log(err));\n  render() {\n    return React.createElement(\"div\", {\n      className: \"flex-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"itineraries-list\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }, React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      className: \"itinerary\",\n      key: this.itinerariesByCity._id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }, this.state.cityItineraries))));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    itineraries: state.itinearies,\n    loading: state.itineraries.loading\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    fetchItinerariesList: () => dispatch(fetchItinerariesList())\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Itineraries);","map":{"version":3,"sources":["/Users/laura/Desktop/Ubicum/Part VI-React/client/client/src/components/Itineraries.js"],"names":["React","Component","connect","fetchItinerariesList","Itineraries","constructor","props","itinerariesByCity","itineraries","city","cityItineraries","state","findOne","fetchItineraryList","componentDidMount","setState","render","_id","mapStateToProps","itinearies","loading","mapDispatchToProps","dispatch"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,oBAAT,QAAqC,qCAArC,C,CACA;;AAIA,MAAMC,WAAN,SAA0BH,SAA1B,CAAoC;AAEhCI,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;;AADe,SAkBnBC,iBAlBmB,GAkBC,MAAM;AACtB,YAAMC,WAAW,GAAG,KAAKF,KAAL,CAAWE,WAA/B;AACA,YAAMC,IAAI,GAAG,KAAKH,KAAL,CAAWE,WAAX,CAAuBC,IAApC;AAFsB,YAGfC,eAHe,GAGI,KAAKC,KAHT,CAGfD,eAHe;AAItB,aAAOF,WAAW,CAACI,OAAZ,CAAqBH,IAAI,IAAI;AAChC,eAAOC,eAAP;AACH,OAFM,CAAP;AAIE,KA1Ba;;AAEf,SAAKC,KAAL,GAAa;AACTH,MAAAA,WAAW,EAAE,EADJ;AAETC,MAAAA,IAAI,EAAC,EAFI;AAGTF,MAAAA,iBAAiB,EAAE,EAHV;AAITM,MAAAA,kBAAkB,EAAE;AAJX,KAAb;AAMH;;AAEDC,EAAAA,iBAAiB,GAAG;AAChB,SAAKR,KAAL,CAAWH,oBAAX;AACA,QAAIO,eAAe,GAAG,KAAKJ,KAAL,CAAWE,WAAX,CAAuBC,IAA7C;AACA,SAAKM,QAAL,CAAc;AACVL,MAAAA,eAAe,EAAGA;AADR,KAAd;AAGH;;AAYD;AACA;AACA;AACA;AACA;AACA;AAGAM,EAAAA,MAAM,GAAG;AACL,WACI;AAAK,MAAA,SAAS,EAAC,gBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEI;AAAK,MAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAI,MAAA,SAAS,EAAC,WAAd;AAA0B,MAAA,GAAG,EAAE,KAAKT,iBAAL,CAAuBU,GAAtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACK,KAAKN,KAAL,CAAWD,eADhB,CADJ,CAFF,CAFJ,CADJ;AAeH;;AAtD+B;;AAyDpC,MAAMQ,eAAe,GAAGP,KAAK,IAAI;AAC7B,SAAO;AACHH,IAAAA,WAAW,EAAEG,KAAK,CAACQ,UADhB;AAEHC,IAAAA,OAAO,EAAET,KAAK,CAACH,WAAN,CAAkBY;AAFxB,GAAP;AAIH,CALD;;AAOA,MAAMC,kBAAkB,GAAGC,QAAQ,IAAI;AACnC,SAAO;AACHnB,IAAAA,oBAAoB,EAAE,MAAMmB,QAAQ,CAACnB,oBAAoB,EAArB;AADjC,GAAP;AAGH,CAJD;;AAOA,eAAeD,OAAO,CAClBgB,eADkB,EAElBG,kBAFkB,CAAP,CAGbjB,WAHa,CAAf","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux'\nimport { fetchItinerariesList } from '../store/actions/itinerariesActions'\n// import { Link } from 'react-router-dom';\n\n\n\nclass Itineraries extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            itineraries: [],\n            city:\"\",\n            itinerariesByCity: [],\n            fetchItineraryList: []\n        }\n    }\n\n    componentDidMount() {\n        this.props.fetchItinerariesList();\n        let cityItineraries = this.props.itineraries.city;\n        this.setState({\n            cityItineraries : cityItineraries\n        });\n    }\n\n    itinerariesByCity = () => {\n        const itineraries = this.props.itineraries;\n        const city = this.props.itineraries.city\n        const {cityItineraries} = this.state;\n        return itineraries.findOne( city => {\n            return cityItineraries\n        },\n\n        )}\n\n    // let cityRequested = req.params.name;\n    // cityModel.findOne({ name: cityRequested })\n    // \t.then(city => {\n    // \t\tres.send(city)\n    // \t})\n    // \t.catch(err => console.log(err));\n\n\n    render() {\n        return (\n            <div className=\"flex-container\">\n\n                <div className=\"itineraries-list\">\n                  \n                  <ul>\n                      <li className=\"itinerary\" key={this.itinerariesByCity._id}>\n                          {this.state.cityItineraries}\n                      </li>\n                  </ul>\n                    \n                </div>\n\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        itineraries: state.itinearies,\n        loading: state.itineraries.loading\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        fetchItinerariesList: () => dispatch(fetchItinerariesList())\n    }\n}\n\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(Itineraries)"]},"metadata":{},"sourceType":"module"}