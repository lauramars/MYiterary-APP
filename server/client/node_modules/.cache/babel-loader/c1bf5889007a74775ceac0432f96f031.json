{"ast":null,"code":"var _jsxFileName = \"/Users/laura/Desktop/Ubicum/Part VI-React/client/client/src/components/Itineraries.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { fetchItinerariesList } from '../store/actions/itinerariesActions'; // import { Link } from 'react-router-dom';\n\nclass Itineraries extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      itineraries: [],\n      city: \"\",\n      itinerariesByCity: [],\n      fetchItineraryList: []\n    };\n  }\n\n  componentDidMount() {} // let city = \n  // this.props.fetchItinerariesList(city);\n  // itinerariesByCity = () => {\n  //     const itineraries = this.props.itineraries;\n  //     // const city = this.props.itineraries.city\n  //     const {cityItineraries} = this.state;\n  //     return itineraries.findOne( city => {\n  //         return cityItineraries\n  //     },\n  //     )}\n  // itinerariesByCity = () => {\n  // itineraries.findOne({city}, function(err, result){\n  //     if (err) throw err;\n  //     console.log(result.city)\n  // })\n  // }\n  //   \t\tlet cityItineraries = req.params.name;\n  //   \t\titineraries.findOne({ name: '' })\n  // \t\t\t.then(city => {\n  // \t\t\t\tres.send(city)\n  // \t\t\t})\n  // \t\t\t.catch(err => console.log(err));\n  // );\n\n\n  render() {\n    const itineraries = this.props.itineraries; // const {cityItineraries} = this.state;\n    //     return itineraries.findOne((city)=>{\n    //         return cityItineraries\n    // }\n\n    return React.createElement(\"div\", {\n      className: \"flex-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"itineraries-list\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    })));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    itineraries: state.itinearies,\n    loading: state.itineraries.loading\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    fetchItinerariesList: city => dispatch(fetchItinerariesList(city))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Itineraries);","map":{"version":3,"sources":["/Users/laura/Desktop/Ubicum/Part VI-React/client/client/src/components/Itineraries.js"],"names":["React","Component","connect","fetchItinerariesList","Itineraries","constructor","props","state","itineraries","city","itinerariesByCity","fetchItineraryList","componentDidMount","render","mapStateToProps","itinearies","loading","mapDispatchToProps","dispatch"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,oBAAT,QAAqC,qCAArC,C,CACA;;AAIA,MAAMC,WAAN,SAA0BH,SAA1B,CAAoC;AAEhCI,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACTC,MAAAA,WAAW,EAAE,EADJ;AAETC,MAAAA,IAAI,EAAC,EAFI;AAGTC,MAAAA,iBAAiB,EAAE,EAHV;AAITC,MAAAA,kBAAkB,EAAE;AAJX,KAAb;AAMH;;AAEDC,EAAAA,iBAAiB,GAAG,CAGnB,CAHgB,CACb;AACA;AAGJ;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAKA;AAEA;AACA;AACA;AACA;AAEA;AAGJ;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEIC,EAAAA,MAAM,GAAG;AAAA,UAEEL,WAFF,GAEgB,KAAKF,KAFrB,CAEEE,WAFF,EAGT;AACA;AACA;AAGA;;AACA,WACI;AAAK,MAAA,SAAS,EAAC,gBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEI;AAAK,MAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,CAFJ,CADJ;AAeH;;AAxEmC;;AA0EpC,MAAMM,eAAe,GAAGP,KAAK,IAAI;AAC7B,SAAO;AACHC,IAAAA,WAAW,EAAED,KAAK,CAACQ,UADhB;AAEHC,IAAAA,OAAO,EAAET,KAAK,CAACC,WAAN,CAAkBQ;AAFxB,GAAP;AAIH,CALD;;AAOA,MAAMC,kBAAkB,GAAGC,QAAQ,IAAI;AACnC,SAAO;AACHf,IAAAA,oBAAoB,EAAGM,IAAD,IAAUS,QAAQ,CAACf,oBAAoB,CAACM,IAAD,CAArB;AADrC,GAAP;AAGH,CAJD;;AAOA,eAAeP,OAAO,CAClBY,eADkB,EAElBG,kBAFkB,CAAP,CAGbb,WAHa,CAAf","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux'\nimport { fetchItinerariesList } from '../store/actions/itinerariesActions'\n// import { Link } from 'react-router-dom';\n\n\n\nclass Itineraries extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            itineraries: [],\n            city:\"\",\n            itinerariesByCity: [],\n            fetchItineraryList: []\n        }\n    }\n\n    componentDidMount() {\n        // let city = \n        // this.props.fetchItinerariesList(city);\n    }\n\n    // itinerariesByCity = () => {\n    //     const itineraries = this.props.itineraries;\n    //     // const city = this.props.itineraries.city\n    //     const {cityItineraries} = this.state;\n    //     return itineraries.findOne( city => {\n    //         return cityItineraries\n    //     },\n\n    //     )}\n    \n    \n\n\n    // itinerariesByCity = () => {\n       \n    // itineraries.findOne({city}, function(err, result){\n    //     if (err) throw err;\n    //     console.log(result.city)\n    // })\n    \t\n    // }\n\n    \n//   \t\tlet cityItineraries = req.params.name;\n//   \t\titineraries.findOne({ name: '' })\n// \t\t\t.then(city => {\n// \t\t\t\tres.send(city)\n// \t\t\t})\n// \t\t\t.catch(err => console.log(err));\n// );\n\n    render() {\n\n        const {itineraries} =this.props;\n    // const {cityItineraries} = this.state;\n    //     return itineraries.findOne((city)=>{\n    //         return cityItineraries\n        \n\n    // }\n    return (\n        <div className=\"flex-container\">\n\n            <div className=\"itineraries-list\">\n              \n              <ul>\n                  {/* <li className=\"itinerary\" key={itineraries._id}>\n                      {this.state.cityItineraries}\n                  </li> */}\n              </ul>\n                \n            </div>\n\n        </div>\n    )\n}\n}\nconst mapStateToProps = state => {\n    return {\n        itineraries: state.itinearies,\n        loading: state.itineraries.loading\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        fetchItinerariesList: (city) => dispatch(fetchItinerariesList(city))\n    }\n}\n\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(Itineraries)"]},"metadata":{},"sourceType":"module"}