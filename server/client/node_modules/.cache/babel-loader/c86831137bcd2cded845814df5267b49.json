{"ast":null,"code":"import _defineProperty from \"/Users/laura/Desktop/Ubicum/Part VI-React/client/client/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n//  3- REDUCERS\nimport { combineReducers } from 'redux';\nimport { FETCH_CITIES_REQUEST, FETCH_CITIES_SUCCESS, FETCH_CITIES_FAILURE } from '../actions/cityActions'; // 1- STATE\n\nconst initialState = {\n  loading: false,\n  cities: [],\n  error: ''\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case FETCH_CITIES_REQUEST:\n      return _objectSpread({}, state, {\n        loading: true\n      });\n\n    case FETCH_CITIES_SUCCESS:\n      return {\n        loading: false,\n        cities: action.payload,\n        error: ''\n      };\n\n    case FETCH_CITIES_FAILURE:\n      return {\n        loading: false,\n        cities: [],\n        error: action.payload\n      };\n  }\n}; // Action Creators\n\n\nconst fetchCities = () => {\n  return function (dispatch) {\n    dispatch(fetchCitiesRequest());\n    axios.get('https://mern-ubiqum-v2.herokuapp.com/cities/all').then(response => {\n      const cities = response.data.map(city => city.id);\n      dispatch(fetchCitiesSuccess(cities));\n    }).catch(error => {\n      dispatch(fetchCitiesFailure(error.message));\n    });\n  };\n};\n\nconst store = createStore(reducer, applyMiddleware(thunkMiddleware)); // now we subscribe the store\n\nstore.subscribe(() => {\n  console.log(store.getState());\n});\nstore.dispatch(fetchCities());","map":{"version":3,"sources":["/Users/laura/Desktop/Ubicum/Part VI-React/client/client/src/store/reducers/cityReducer.js"],"names":["combineReducers","FETCH_CITIES_REQUEST","FETCH_CITIES_SUCCESS","FETCH_CITIES_FAILURE","initialState","loading","cities","error","reducer","state","action","type","payload","fetchCities","dispatch","fetchCitiesRequest","axios","get","then","response","data","map","city","id","fetchCitiesSuccess","catch","fetchCitiesFailure","message","store","createStore","applyMiddleware","thunkMiddleware","subscribe","console","log","getState"],"mappings":";;;;;;AAAA;AAEA,SAAQA,eAAR,QAA8B,OAA9B;AACA,SACIC,oBADJ,EAEIC,oBAFJ,EAGIC,oBAHJ,QAIO,wBAJP,C,CAMA;;AAEA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,OAAO,EAAE,KADQ;AAEjBC,EAAAA,MAAM,EAAE,EAFS;AAGjBC,EAAAA,KAAK,EAAE;AAHU,CAArB;;AAMA,MAAMC,OAAO,GAAG,CAACC,KAAK,GAAGL,YAAT,EAAuBM,MAAvB,KAAkC;AAC9C,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKV,oBAAL;AACI,+BACOQ,KADP;AAEIJ,QAAAA,OAAO,EAAE;AAFb;;AAKJ,SAAKH,oBAAL;AACI,aAAO;AACHG,QAAAA,OAAO,EAAE,KADN;AAEHC,QAAAA,MAAM,EAAEI,MAAM,CAACE,OAFZ;AAGHL,QAAAA,KAAK,EAAE;AAHJ,OAAP;;AAMJ,SAAKJ,oBAAL;AACI,aAAO;AACHE,QAAAA,OAAO,EAAE,KADN;AAEHC,QAAAA,MAAM,EAAE,EAFL;AAGHC,QAAAA,KAAK,EAAEG,MAAM,CAACE;AAHX,OAAP;AAfR;AAqBH,CAtBD,C,CAwBA;;;AAEA,MAAMC,WAAW,GAAG,MAAM;AACtB,SAAO,UAASC,QAAT,EAAmB;AAEtBA,IAAAA,QAAQ,CAACC,kBAAkB,EAAnB,CAAR;AACAC,IAAAA,KAAK,CAACC,GAAN,CAAU,iDAAV,EACCC,IADD,CACOC,QAAQ,IAAI;AACf,YAAMb,MAAM,GAAGa,QAAQ,CAACC,IAAT,CAAcC,GAAd,CAAkBC,IAAI,IAAIA,IAAI,CAACC,EAA/B,CAAf;AACAT,MAAAA,QAAQ,CAACU,kBAAkB,CAAClB,MAAD,CAAnB,CAAR;AACH,KAJD,EAMCmB,KAND,CAMQlB,KAAK,IAAI;AACbO,MAAAA,QAAQ,CAACY,kBAAkB,CAACnB,KAAK,CAACoB,OAAP,CAAnB,CAAR;AACH,KARD;AASH,GAZD;AAaH,CAdD;;AAgBA,MAAMC,KAAK,GAAGC,WAAW,CAACrB,OAAD,EAAUsB,eAAe,CAACC,eAAD,CAAzB,CAAzB,C,CAEA;;AAEAH,KAAK,CAACI,SAAN,CAAgB,MAAK;AAACC,EAAAA,OAAO,CAACC,GAAR,CAAYN,KAAK,CAACO,QAAN,EAAZ;AAA8B,CAApD;AACAP,KAAK,CAACd,QAAN,CAAeD,WAAW,EAA1B","sourcesContent":["//  3- REDUCERS\n\nimport {combineReducers} from 'redux'\nimport {\n    FETCH_CITIES_REQUEST,\n    FETCH_CITIES_SUCCESS,\n    FETCH_CITIES_FAILURE\n} from '../actions/cityActions'\n\n// 1- STATE\n\nconst initialState = {\n    loading: false, \n    cities: [],\n    error: ''\n}\n\nconst reducer = (state = initialState, action) => {\n    switch (action.type){\n        case FETCH_CITIES_REQUEST:\n            return {\n                ...state,\n                loading: true\n            }\n\n        case FETCH_CITIES_SUCCESS:\n            return {\n                loading: false, \n                cities: action.payload,\n                error: ''\n            }    \n\n        case FETCH_CITIES_FAILURE:\n            return {\n                loading: false, \n                cities: [],\n                error: action.payload\n            }    \n    }\n}\n\n// Action Creators\n\nconst fetchCities = () => {\n    return function(dispatch) {\n        \n        dispatch(fetchCitiesRequest())\n        axios.get('https://mern-ubiqum-v2.herokuapp.com/cities/all')\n        .then (response => {\n            const cities = response.data.map(city => city.id)\n            dispatch(fetchCitiesSuccess(cities))\n        })\n\n        .catch (error => {\n            dispatch(fetchCitiesFailure(error.message))\n        })\n    }\n}\n\nconst store = createStore(reducer, applyMiddleware(thunkMiddleware))\n\n// now we subscribe the store\n\nstore.subscribe(()=> {console.log(store.getState())})\nstore.dispatch(fetchCities())"]},"metadata":{},"sourceType":"module"}