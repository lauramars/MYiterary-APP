{"ast":null,"code":"import _defineProperty from \"/Users/laura/Desktop/Ubicum/Part VI-React/client/client/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n//  3- REDUCERS\n// 0- create ReduxStore\n// const redux = require('redux')\n// const createStore = redux.createStore\n// const applyMiddleware = redux.applyMiddleware\n// const thunkMiddleware = require('redux-thunk').default\n// import {combineReducers} from 'redux'\n// import {\n//     FETCH_CITIES_REQUEST,\n//     FETCH_CITIES_SUCCESS,\n//     FETCH_CITIES_FAILURE\n// } from \nconst FETCH_CITIES_REQUEST = 'FETCH_CITIES_REQUEST';\nconst FETCH_CITIES_SUCCESS = 'FETCH_CITIES_SUCCESS';\nconst FETCH_CITIES_FAILURE = 'FETCH_CITIES_FAILURE'; // 1- STATE\n\nconst initialState = {\n  loading: false,\n  cities: [],\n  error: ''\n};\n\nfunction citiesReducer(state = initialState, action) {\n  switch (action.type) {\n    case FETCH_CITIES_REQUEST:\n      return _objectSpread({}, state, {\n        loading: true\n      });\n\n    case FETCH_CITIES_SUCCESS:\n      return {\n        loading: false,\n        cities: action.payload,\n        error: ''\n      };\n\n    case FETCH_CITIES_FAILURE:\n      return {\n        loading: false,\n        cities: [],\n        error: action.payload\n      };\n\n    default:\n      return state;\n  }\n}\n\nmodule.exports = citiesReducer; // Action Creators\n// const store = createStore(citiesReducer, applyMiddleware(thunkMiddleware))\n// // now we subscribe the store\n// store.subscribe(()=> {console.log(store.getState())})\n// store.dispatch(fetchCitiesList())\n// export default (citiesReducer, fetchCitiesList)","map":{"version":3,"sources":["/Users/laura/Desktop/Ubicum/Part VI-React/client/client/src/store/reducers/cityReducer.js"],"names":["FETCH_CITIES_REQUEST","FETCH_CITIES_SUCCESS","FETCH_CITIES_FAILURE","initialState","loading","cities","error","citiesReducer","state","action","type","payload","module","exports"],"mappings":";;;;;;AAAA;AAEA;AAEA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AAEC,MAAMA,oBAAoB,GAAG,sBAA7B;AACA,MAAMC,oBAAoB,GAAG,sBAA7B;AACA,MAAMC,oBAAoB,GAAG,sBAA7B,C,CAED;;AAEA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,OAAO,EAAE,KADQ;AAEjBC,EAAAA,MAAM,EAAE,EAFS;AAGjBC,EAAAA,KAAK,EAAE;AAHU,CAArB;;AAMA,SAASC,aAAT,CAAwBC,KAAK,GAAGL,YAAhC,EAA8CM,MAA9C,EAAsD;AAClD,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKV,oBAAL;AACI,+BACOQ,KADP;AAEIJ,QAAAA,OAAO,EAAE;AAFb;;AAKJ,SAAKH,oBAAL;AACI,aAAO;AACHG,QAAAA,OAAO,EAAE,KADN;AAEHC,QAAAA,MAAM,EAAEI,MAAM,CAACE,OAFZ;AAGHL,QAAAA,KAAK,EAAE;AAHJ,OAAP;;AAMJ,SAAKJ,oBAAL;AACI,aAAO;AACHE,QAAAA,OAAO,EAAE,KADN;AAEHC,QAAAA,MAAM,EAAE,EAFL;AAGHC,QAAAA,KAAK,EAAEG,MAAM,CAACE;AAHX,OAAP;;AAKJ;AACI,aAAOH,KAAP;AArBR;AAuBH;;AAGDI,MAAM,CAACC,OAAP,GAAiBN,aAAjB,C,CACA;AAIA;AAEA;AAEA;AACA;AAEA","sourcesContent":["//  3- REDUCERS\n\n// 0- create ReduxStore\n\n// const redux = require('redux')\n// const createStore = redux.createStore\n// const applyMiddleware = redux.applyMiddleware\n// const thunkMiddleware = require('redux-thunk').default\n\n\n\n\n// import {combineReducers} from 'redux'\n// import {\n//     FETCH_CITIES_REQUEST,\n//     FETCH_CITIES_SUCCESS,\n//     FETCH_CITIES_FAILURE\n// } from \n\n const FETCH_CITIES_REQUEST = 'FETCH_CITIES_REQUEST'\n const FETCH_CITIES_SUCCESS = 'FETCH_CITIES_SUCCESS'\n const FETCH_CITIES_FAILURE = 'FETCH_CITIES_FAILURE' \n\n// 1- STATE\n\nconst initialState = {\n    loading: false, \n    cities: [],\n    error: ''\n}\n\nfunction citiesReducer (state = initialState, action) {\n    switch (action.type){\n        case FETCH_CITIES_REQUEST:\n            return {\n                ...state,\n                loading: true\n            }\n\n        case FETCH_CITIES_SUCCESS:\n            return {\n                loading: false, \n                cities: action.payload,\n                error: ''\n            }    \n\n        case FETCH_CITIES_FAILURE:\n            return {\n                loading: false, \n                cities: [],\n                error: action.payload\n            }  \n        default: \n            return state\n    }\n}\n\n\nmodule.exports = citiesReducer;\n// Action Creators\n\n\n\n// const store = createStore(citiesReducer, applyMiddleware(thunkMiddleware))\n\n// // now we subscribe the store\n\n// store.subscribe(()=> {console.log(store.getState())})\n// store.dispatch(fetchCitiesList())\n\n// export default (citiesReducer, fetchCitiesList)"]},"metadata":{},"sourceType":"module"}